name: Claude Component Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/components/**/*.tsx'
      - 'src/components/**/*.ts'
      - 'src/hooks/**/*.ts'
      - 'src/stores/**/*.ts'
      - 'src/types/**/*.ts'
      - 'src/utils/**/*.ts'

jobs:
  claude-component-review:
    # Skip for dependabot
    if: github.event.pull_request.user.login != 'dependabot[bot]'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Create GitHub MCP Config
        run: |
          cat > /tmp/github-mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_PAT || secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      
      - name: Claude React/TypeScript Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Component-specific review prompt
          prompt: |
            ## Context
            Repository: ${{ github.repository }}
            PR Number: #${{ github.event.pull_request.number }}
            PR Title: ${{ github.event.pull_request.title }}
            Author: ${{ github.event.pull_request.user.login }}
            Files Changed: ${{ github.event.pull_request.changed_files }}
            ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && '⭐ First-time contributor - please be welcoming and provide detailed guidance!' || '' }}
            
            ## Task
            Review React/TypeScript components for the ESYNYC Lesson Search application.
            The PR branch is already checked out in the current working directory.
            
            ## Review with special attention to:
            
            ## React Best Practices:
            - Hook usage and dependency arrays
            - Component composition (avoid prop drilling)
            - Performance optimizations (memo, useMemo, useCallback usage)
            - Accessibility (ARIA labels, keyboard navigation, focus management)
            - Error boundaries for robust error handling
            
            ## TypeScript Requirements:
            - No 'any' types - suggest proper types
            - Proper interface/type definitions
            - Generic usage where appropriate
            - Discriminated unions for complex state
            - Strict null checks
            
            ## Zustand Store Patterns:
            - State shape normalization
            - Selector performance (use shallow equality)
            - Action naming conventions (verb prefixes)
            - Avoid storing derived state
            
            ## Tailwind CSS:
            - Consistent utility class ordering
            - Responsive design patterns (mobile-first)
            - Dark mode class preparation
            - Avoid arbitrary values when possible
            
            ## Component Requirements:
            - All 11 filter categories must be supported
            - Cultural heritage hierarchy (e.g., "Asian" includes Chinese, Japanese, Korean)
            - Ingredient grouping (e.g., "Winter squash" includes butternut, pumpkin)
            - Mobile-responsive design is mandatory
            
            ## Performance Considerations:
            - List virtualization for large result sets
            - Debouncing for search inputs
            - Lazy loading for modal content
            - Image optimization
            
            ## How to Provide Feedback
            
            ### Use Inline Comments (PREFERRED):
            Create a pending PR review and add inline comments using:
            1. `mcp__github__create_pending_pull_request_review` to start the review
            2. `mcp__github__add_comment_to_pending_review` for each inline comment
            3. `mcp__github__submit_pending_pull_request_review` to submit the review
            
            Focus inline comments on:
            - Hook dependency issues
            - Type errors or 'any' usage
            - Performance problems
            - Accessibility violations
            
            ### Use General Comments:
            Use `gh pr comment` for overall architectural feedback.
            
            ## Important DO NOT Rules:
            - DO NOT suggest adding more than 11 filters
            - DO NOT recommend console.log (use logger.debug)
            - DO NOT comment on generated files
            - DO NOT provide excessive positive feedback inline
            
            Please provide specific code examples for any improvements.
            Be constructive and focus on maintainability and user experience.
          
          # Claude CLI arguments
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          claude_args: |
            --max-turns 5
            --mcp-config /tmp/github-mcp-config.json
            --allowed-tools "mcp__github__create_pending_pull_request_review,mcp__github__add_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request,mcp__github__get_pull_request_files,Bash(npm run type-check),Bash(npm run lint),Bash(npm test -- --run),Bash(npm run build),Bash(gh pr diff -- src/components),Bash(gh pr comment:*),Read,Grep"